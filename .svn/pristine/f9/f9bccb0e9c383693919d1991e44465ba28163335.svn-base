************************************************************
*     -------------------------
      FUNCTION acrsg(wlen)
*     -------------------------
*
*     (Purpose)
*     Calculate absorption of acrylic
*
*     (Input)
*     wlen   : wave length of the light (nm)
*
*     (Output)
*     absacr : absorption (/m) 
*                         ~~~~ 
*     (Comment)
*     When wavelength is more than 600(nm) or less than 295(nm),
*     Function absacr return 0.0 . 
*
*     (Creation Date and Author)
*       2002. 11.7 ; R.Nambu
*
**********************************************************************
      implicit none
c number of datas
      integer max
      parameter (max=306)
c input 
      real wlen
c output
      real acrsg
c local variable
      real WL(max),ABS(max),diff,wlstart
      parameter (wlstart = 295.)
      real abs1(50),abs2(50),abs3(50),abs4(50),abs5(50),abs6(50),abs7(6)
c     <<<<<<< acrsg.F
     
      equivalence(ABS(1),abs1(1))
      equivalence(ABS(51),abs2(1))
      equivalence(ABS(101),abs3(1))
      equivalence(ABS(151),abs4(1))
      equivalence(ABS(201),abs5(1))
      equivalence(ABS(251),abs6(1))
      equivalence(ABS(301),abs7(1))

c     =======
      equivalence(ABS(1),abs1(1))
      equivalence(ABS(51),abs2)
      equivalence(ABS(101),abs3)
      equivalence(ABS(151),abs4)
      equivalence(ABS(201),abs5)
      equivalence(ABS(251),abs6)
      equivalence(ABS(301),abs7)


c     >>>>>>> 1.4
      data abs1 /3.40E-02,2.64E-02,2.06E-02,1.63E-02,1.32E-02,1.10E-02,
     &     9.44E-03,8.32E-03,7.49E-03,6.92E-03,6.46E-03,6.15E-03,5.92E-03,
     &     5.69E-03,5.49E-03,5.37E-03,5.27E-03,5.17E-03,5.08E-03,4.97E-03,
     &     4.84E-03,4.79E-03,4.72E-03,4.65E-03,4.56E-03,4.48E-03,4.41E-03,
     &     4.37E-03,4.29E-03,4.21E-03,4.13E-03,4.00E-03,3.90E-03,3.82E-03,
     &     3.77E-03,3.70E-03,3.65E-03,3.56E-03,3.42E-03,3.40E-03,3.29E-03,
     &     3.19E-03,3.06E-03,2.98E-03,2.95E-03,2.91E-03,3.02E-03,2.91E-03,
     &     2.81E-03,2.62E-03/
      data abs2 /2.59E-03,2.54E-03,2.54E-03,2.43E-03,2.43E-03,2.38E-03,
     &     2.33E-03,2.26E-03,2.22E-03,2.16E-03,2.06E-03,2.04E-03,1.98E-03,
     &     1.91E-03,1.85E-03,1.84E-03,1.79E-03,1.76E-03,1.72E-03,1.60E-03,
     &     1.55E-03,1.52E-03,1.46E-03,1.41E-03,1.37E-03,1.36E-03,1.37E-03,
     &     1.30E-03,1.28E-03,1.25E-03,1.15E-03,1.10E-03,1.08E-03,1.05E-03,
     &     1.00E-03,9.68E-04,9.61E-04,9.02E-04,9.03E-04,8.93E-04,8.58E-04,
     &     8.35E-04,8.19E-04,7.73E-04,7.31E-04,7.45E-04,7.38E-04,7.34E-04,
     &     7.35E-04,7.25E-04/
      data abs3 /7.36E-04,7.36E-04,7.34E-04,7.14E-04,6.98E-04,7.04E-04,
     &     6.79E-04,6.83E-04,6.85E-04,7.13E-04,7.58E-04,7.63E-04,7.58E-04,
     &     7.79E-04,8.10E-04,7.92E-04,7.71E-04,7.42E-04,7.21E-04,7.53E-04,
     &     7.64E-04,7.16E-04,7.11E-04,7.09E-04,7.28E-04,7.54E-04,7.28E-04,
     &     6.85E-04,6.72E-04,6.48E-04,6.22E-04,6.02E-04,6.07E-04,6.01E-04,
     &     5.98E-04,6.25E-04,6.26E-04,6.34E-04,6.29E-04,6.57E-04,6.61E-04,
     &     6.88E-04,6.80E-04,6.80E-04,6.84E-04,6.76E-04,6.86E-04,6.60E-04,
     &     6.70E-04,6.58E-04/
      data abs4 /6.66E-04,6.50E-04,6.21E-04,6.19E-04,6.11E-04,6.25E-04,
     &     6.00E-04,5.91E-04,5.89E-04,5.67E-04,5.79E-04,5.89E-04,5.95E-04,
     &     5.91E-04,5.92E-04,5.85E-04,5.80E-04,5.79E-04,5.65E-04,5.50E-04,
     &     5.40E-04,5.26E-04,5.28E-04,5.19E-04,5.03E-04,5.26E-04,5.21E-04,
     &     5.34E-04,5.44E-04,5.63E-04,5.71E-04,5.70E-04,5.66E-04,5.53E-04,
     &     5.66E-04,5.57E-04,5.50E-04,5.22E-04,5.08E-04,4.99E-04,5.23E-04,
     &     5.35E-04,5.45E-04,5.46E-04,5.59E-04,5.70E-04,5.62E-04,5.77E-04,
     &     5.54E-04,5.45E-04/
      data abs5 /5.39E-04,5.43E-04,5.25E-04,5.30E-04,5.39E-04,5.27E-04,
     &     5.24E-04,5.29E-04,5.28E-04,5.06E-04,5.09E-04,5.34E-04,5.43E-04,
     &     5.54E-04,5.70E-04,5.53E-04,5.35E-04,5.56E-04,5.45E-04,5.06E-04,
     &     4.99E-04,5.03E-04,4.90E-04,4.98E-04,4.87E-04,4.64E-04,4.09E-04,
     &     4.03E-04,3.98E-04,4.00E-04,4.00E-04,4.18E-04,4.18E-04,4.10E-04,
     &     4.13E-04,4.26E-04,4.28E-04,4.43E-04,4.45E-04,4.47E-04,4.33E-04,
     &     4.31E-04,4.42E-04,4.41E-04,4.36E-04,4.22E-04,4.31E-04,4.17E-04,
     &     4.20E-04,4.10E-04/
      data abs6 /3.86E-04,3.72E-04,3.85E-04,3.83E-04,3.51E-04,3.51E-04,
     &     3.50E-04,3.81E-04,3.84E-04,3.76E-04,3.52E-04,3.46E-04,3.63E-04,
     &     3.70E-04,3.63E-04,3.47E-04,3.45E-04,3.43E-04,3.49E-04,3.50E-04,
     &     3.46E-04,3.42E-04,3.41E-04,3.37E-04,3.29E-04,3.32E-04,3.38E-04,
     &     3.22E-04,3.29E-04,3.30E-04,3.37E-04,3.34E-04,3.34E-04,3.24E-04,
     &     3.08E-04,3.14E-04,3.16E-04,3.33E-04,3.44E-04,3.45E-04,3.44E-04,
     &     3.56E-04,3.61E-04,3.41E-04,3.28E-04,2.90E-04,2.70E-04,2.60E-04,
     &     2.55E-04,2.59E-04/
      data abs7 /2.74E-04,2.86E-04,2.93E-04,3.03E-04,2.98E-04,2.88E-04/
C     <<<<<<< acrsg.F
     
c     =======
c     >>>>>>> 1.4

      integer i
      
      integer isave
      save isave, WL, ABS

c data input
      if(isave.eq.0) then
         isave=1
         do i=1,max
            WL(i) = wlstart + float(i-1)
         enddo
      endif

c begin
      if(wlen .lt. WL(1)) then
         acrsg = 0.0
      else if(wlen .eq. WL(max)) then
         acrsg = ABS(max)
      else if(wlen .gt. WL(max)) then
         acrsg = 0.0
      else 
         i = 1
         do while (WL(i) .le. wlen)
            i = i + 1
         enddo
         diff = WL(i) - WL(i-1)
         acrsg = ABS(i)*(wlen-WL(i-1))/diff + 
     &        ABS(i-1)*(WL(i)-wlen)/diff
      endif

*****************************************
*     change unit (mm)-->(m)
***************************************      
      acrsg=acrsg*1000.
      
      return
      end
      









